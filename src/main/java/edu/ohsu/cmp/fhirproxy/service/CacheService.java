package edu.ohsu.cmp.fhirproxy.service;

import edu.ohsu.cmp.fhirproxy.exception.ClientInfoNotFoundException;
import edu.ohsu.cmp.fhirproxy.model.ClientInfo;
import edu.ohsu.cmp.fhirproxy.util.CryptoUtil;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@Service
public class CacheService {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final Map<String, ClientInfo> map;

    @Value("${security.salt}")
    private String salt;

    public CacheService() {
        this.map = new HashMap<>();
        if (StringUtils.isBlank(salt) || salt.length() < 32) {  // todo : salt is always null when we get here
            logger.warn("*** SHORT SALT DETECTED ***");
            logger.warn("security.salt should be at least 32 characters long and random.");
            String proposedSalt = Base64.getEncoder().encodeToString(CryptoUtil.randomBytes(64));
            logger.warn("Consider using the following Base64-encoded bytes as your salt, generated by SecureRandom: " + proposedSalt);
        }
    }

    public String putClientInfo(ClientInfo clientInfo) {
        String key = Base64.getEncoder().encodeToString(DigestUtils.sha512(clientInfo.toString() + salt));
        map.put(key, clientInfo);
        return key;
    }

    public ClientInfo getClientInfo(String key) throws ClientInfoNotFoundException {
        if (map.containsKey(key)) {
            return map.get(key);
        } else {
            throw new ClientInfoNotFoundException("client info not found for key=" + key);
        }
    }
}
